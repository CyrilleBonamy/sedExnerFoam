/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  1.7.1                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "system";
    object      fvSchemes;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

ddtSchemes
{
    default         Euler implicit;
}

gradSchemes
{
    default         Gauss linear;
}

divSchemes
{
    default         none;
// UEqn
    div(phi,U)  Gauss upwind;//limitedLinear01 1;
// CEqn
    div(phip,C)    Gauss upwind phip;
// pEqn
    div((nuEff*dev2(T(grad(U))))) Gauss linear;

}

laplacianSchemes
{
    default         Gauss linear orthogonal;
    /*// UEqn
    laplacian(nuEff,U) Gauss linear;
// CEqn
    laplacian(epsEff,C) Gauss linear;
// pEqn
    laplacian((1|A(U)),p) Gauss linear;
// k and EpsilonEqn 
    laplacian(DkEff,k) Gauss linear;
    laplacian(DkEff,beta) Gauss linear;
    laplacian(DepsilonEff,epsilon) Gauss linear;
    laplacian(DepsilonEff,beta) Gauss linear;
        laplacian(DomegaEff,omega) Gauss linear;*/
}


interpolationSchemes
{
    default  linear;
    interpolate((U+Ws)) downwind phip;
    //flux(U) linear;
    //flux((U+Ws)) upwind phi;
    //flux(HbyA) linear;
    //default localMax;
    //dotInterpolate(S,U_0) linear;
    //interpolate((1|A(U))) linear;
}

snGradSchemes
{
    default         corrected;
}

fluxRequired
{
    default         no;
    p                 ;
}


// ************************************************************************* //
